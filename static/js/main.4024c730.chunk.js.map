{"version":3,"sources":["rxdb/test.ts","rxdb/helper.tsx","rxdb/db.ts","RemoteTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["addRxPlugin","RxDBAdapterCheckPlugin","RxDBEncryptionPlugin","RxDBQueryBuilderPlugin","require","createAUser","name","faker","findName","phone","phoneNumber","address","streetAddress","area","countryCode","addUserstoDB","db","total","setProgress","a","chunk","t0","performance","now","timeTaken","totalPass","Math","floor","pass","toFixed","userArry","i","push","ta0","heroes","bulkInsert","result","ta1","console","log","success","length","error","t1","adapter","reduce","b","min","max","timeStart","timeEnd","funName","checkAdapter","then","val","dbPromise","collections","schema","title","description","version","keyCompression","type","properties","primary","required","methods","scream","what","this","toUpperCase","statics","getCount","find","exec","allDocs","getCountPouch","pouch","catch","err","entries","rows","getCountWithInfo","info","doc_count","getDocs","count","page","skip","limit","getDocsPouch","include_docs","addDocs","docs","res","createDB","createRxDatabase","password","multiInstance","eventReduce","dir","Promise","all","map","colData","collection","deleteDB","destroy","remove","get","adpater","warn","RemoteTable","data","sizePerPage","onTableChange","totalSize","columns","dataField","text","pagination","paginationFactory","custom","paginationProps","paginationTableProps","Row","Col","remote","bootstrap4","keyField","className","App","useState","users","setUsers","setDB","totalCount","setTotalCount","addCount","setAddCount","progress","setSizePerPage","setPage","setAdapter","availabeAdapters","useEffect","theDB","anyNameFunction","reloadUI","adapterLabel","idb","memory","websql","leveldb","localstorage","handleAddSubmit","e","preventDefault","progressInstance","ProgressBar","label","Container","Jumbotron","style","textAlign","Form","onSubmit","xs","Control","id","placeholder","value","onChange","target","Button","variant","ButtonGroup","aria-label","anAdapter","key","onClick","Card","marginTop","Body","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4024c730.chunk.js","sourcesContent":["import { RxDBAdapterCheckPlugin } from \"rxdb/plugins/adapter-check\";\nimport { RxDBEncryptionPlugin } from \"rxdb/plugins/encryption\";\nimport { RxDBQueryBuilderPlugin } from \"rxdb/plugins/query-builder\";\nimport { checkAdapter, addRxPlugin } from \"rxdb\";\n\naddRxPlugin(RxDBAdapterCheckPlugin);\naddRxPlugin(RxDBEncryptionPlugin);\naddRxPlugin(RxDBQueryBuilderPlugin);\n\naddRxPlugin(require(\"pouchdb-adapter-idb\"));\naddRxPlugin(require(\"pouchdb-adapter-memory\"));\n// addRxPlugin(require(\"pouchdb-adapter-leveldb\"));\n\nexport const checkDB = () => {\n  checkAdapter(\"localstorage\").then((val) => {\n    console.log(\"RXJS -> Adapter -> localstorage status :\", val);\n  });\n  checkAdapter(\"idb\").then((val) => {\n    console.log(\"RXJS -> Adapter -> idb status :\", val);\n  });\n  checkAdapter(\"memory\").then((val) => {\n    console.log(\"RXJS -> Adapter -> memory status :\", val);\n  });\n  checkAdapter(\"leveldb\").then((val) => {\n    console.log(\"RXJS -> Adapter -> leveldb status :\", val);\n  });\n};\n","import { RxDatabase } from \"rxdb\";\nimport React from \"react\";\nimport faker from \"faker\";\nimport { HeroDocType, MyDatabaseCollections } from \"./db\";\n\n// const userSchema = {\n//   title: \"User schema\",\n//   version: 0,\n//   description: \"describes a simple hero\",\n//   type: \"object\",\n//   properties: {\n//     name: {\n//       type: \"string\",\n//       primary: true,\n//     },\n//     age: {\n//       type: \"number\",\n//     },\n//   },\n// };\n\n// export const createDB = async () => {\n//   // addRxPlugin(require(\"pouchdb-adapter-memory\"));\n//   addRxPlugin(require(\"pouchdb-adapter-idb\"));\n\n//   console.log(\"Setting up db.. \");\n//   const db = await createRxDatabase({\n//     name: \"heroesdb\", // <- name\n//     adapter: \"idb\", // <- storage-adapter\n//     password: \"myPassword\", // <- password (optional)\n//     multiInstance: false, // <- multiInstance (optional, default: true)\n//     eventReduce: false, // <- eventReduce (optional, default: true)\n//   });\n//   console.log(\"created db\");\n//   console.dir(db);\n//   await db.collection({\n//     name: \"users\",\n//     schema: userSchema,\n//   });\n//   console.log(\"created users coll..\");\n//   console.dir(db.users.name);\n\n//   return db;\n// };\n\nexport const createAUser = (): HeroDocType => {\n  var name = faker.name.findName();\n  var phone = faker.phone.phoneNumber();\n  var address = faker.address.streetAddress();\n  var area = faker.address.countryCode();\n  return { name, phone, address, area };\n};\n\nexport const addUserstoDB = async (\n  db: RxDatabase<MyDatabaseCollections> | undefined,\n  total: number,\n  setProgress: React.Dispatch<React.SetStateAction<number>>,\n  chunk: number = 100\n) => {\n  const t0 = performance.now();\n  const timeTaken = [];\n  const totalPass = Math.floor(total / chunk);\n\n  for (let pass = 0; pass < totalPass; pass++) {\n    setProgress(+(((pass + 1) / totalPass) * 100).toFixed(2));\n\n    const userArry = [];\n    for (let i = 0; i < chunk; i++) {\n      userArry.push(createAUser());\n    }\n    const ta0 = performance.now();\n    const result = await db?.heroes.bulkInsert(userArry);\n    const ta1 = performance.now();\n    timeTaken.push(ta1 - ta0);\n    console.log(\n      `inserted ${result?.success.length} docs & dailed ${result?.error.length} docs`\n    );\n  }\n  const t1 = performance.now();\n  console.log(\n    `${db?.adapter}: Time Taken to add ${total} users : ${(t1 - t0).toFixed(\n      1\n    )}ms`\n  );\n  console.log(\n    `Pass: ${timeTaken.length}, time: ${timeTaken\n      .reduce((a, b) => a + b, 0)\n      .toFixed(1)},min: ${Math.min(...timeTaken).toFixed(1)},max: ${Math.max(\n      ...timeTaken\n    ).toFixed(1)},avg: ${(\n      timeTaken.reduce((a, b) => a + b, 0) / timeTaken.length\n    ).toFixed(1)},  `\n  );\n  // console.log(db);\n};\n\n// export const getUsers = async (count: number, page: number = 0) => {\n//   const db = await get();\n//   const userDocs = await db.heroes.getDocs\n//     .find()\n//     .skip(count * page)\n//     .limit(count)\n//     .exec();\n//   return userDocs;\n// };\n\n// export const getUserCount = async (db: RxDatabase) => {\n//   const userDocs = await db.users.find().exec();\n//   console.log(\"Total users Count: \", userDocs.length);\n//   return userDocs.length;\n// };\n\nexport const printDBInfo = (db: RxDatabase) => {\n  // db.collections.usrs info().then(function (info) {\n  //   console.log(info);\n  // });\n  console.log(db);\n};\n\nexport const timeStart = () => {\n  return performance.now();\n};\n\nexport const timeEnd = (timeStart: number, funName: string) => {\n  var t1 = performance.now();\n  console.log(`fun: ${funName} took ${(t1 - timeStart).toFixed(4)}ms`);\n};\nexport const kkk = \"\";\n","/* eslint-disable no-console */\nimport {\n  createRxDatabase,\n  addRxPlugin,\n  RxDocument,\n  RxCollection,\n  RxDatabase,\n  RxJsonSchema,\n} from \"rxdb\";\nimport { checkDB } from \"./test\";\nimport { timeStart, timeEnd } from \"./helper\";\n\n// eslint-disable-next-line import/no-unresolved\naddRxPlugin(require(\"pouchdb-adapter-memory\"));\naddRxPlugin(require(\"pouchdb-adapter-idb\"));\naddRxPlugin(require(\"pouchdb-adapter-websql\"));\n\nexport type HeroDocType = {\n  name: string;\n  phone: string;\n  address: string;\n  area?: string; // optional\n};\n\ntype HeroDocMethods = {\n  scream: (v: string) => string;\n};\n\ntype HeroDocument = RxDocument<HeroDocType, HeroDocMethods>;\n\n// we declare one static ORM-method for the collection\ntype HeroCollectionMethods = {\n  getCount: (this: HeroCollection) => Promise<number>;\n  getCountPouch: (this: HeroCollection) => Promise<number>;\n  getCountWithInfo: (this: HeroCollection) => Promise<number>;\n  addDocs: (this: HeroCollection, docs: HeroDocType[]) => void;\n  getDocs: (\n    this: HeroCollection,\n    count: number,\n    page?: number\n  ) => Promise<HeroDocType[]>;\n  getDocsPouch: (\n    this: HeroCollection,\n    count: number,\n    page: number\n  ) => Promise<HeroDocType[]>;\n};\n\n// and then merge all our types\ntype HeroCollection = RxCollection<\n  HeroDocType,\n  HeroDocMethods,\n  HeroCollectionMethods\n>;\n\nexport type MyDatabaseCollections = {\n  heroes: HeroCollection;\n};\ncheckDB();\n\ntype MyDatabase = RxDatabase<MyDatabaseCollections>;\n\nconst heroSchema: RxJsonSchema<HeroDocType> = {\n  title: \"vendor schema\",\n  description: \"describes a vendor\",\n  version: 0,\n  keyCompression: false,\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\",\n    },\n    phone: {\n      type: \"string\",\n      primary: true,\n    },\n    address: {\n      type: \"string\",\n    },\n    area: {\n      type: \"string\",\n    },\n  },\n  required: [\"name\", \"phone\", \"address\"],\n};\n\nconst heroDocMethods: HeroDocMethods = {\n  scream(this: HeroDocument, what: string) {\n    return `${this.name} screams: ${what.toUpperCase()}`;\n  },\n};\n\nconst heroCollectionMethods: HeroCollectionMethods = {\n  async getCount(this: HeroCollection) {\n    const t0 = timeStart();\n    const allDocs = await this.find().exec();\n    console.log(\"Total users Count: \", allDocs.length);\n    timeEnd(t0, `getCount - ${allDocs.length}`);\n    return allDocs.length;\n  },\n  async getCountPouch(this: HeroCollection) {\n    const t0 = timeStart();\n\n    const entries = await this.pouch.allDocs().catch((err) => {\n      console.log(\"failed alldocs\", err);\n    });\n    console.log(\"Total users Count: \", entries.rows.length);\n    timeEnd(t0, `getCountPouch - ${entries.rows.length}`);\n\n    return entries.rows.length;\n  },\n\n  async getCountWithInfo(this: HeroCollection) {\n    const t0 = timeStart();\n    const info = await this.pouch.info();\n    console.log(\"Total users Count: \", info.doc_count);\n    timeEnd(t0, `getCountWithInfo - ${info.doc_count}`);\n    return info.doc_count;\n  },\n\n  async getDocs(this: HeroCollection, count: number, page: number = 0) {\n    const t0 = timeStart();\n\n    const allDocs = await this.find()\n      .skip(count * page)\n      .limit(count)\n      .exec();\n    console.log(\n      `retrived ${allDocs.length} docs from users (skipped : ${page * count})`\n    );\n    timeEnd(t0, `getDocs - ${allDocs.length} items`);\n    return allDocs;\n  },\n\n  async getDocsPouch(this: HeroCollection, count: number, page: number = 0) {\n    const t0 = timeStart();\n    const allDocs = await this.pouch.allDocs({ include_docs: true });\n    timeEnd(t0, `getDocsPouch - ${allDocs.length} items`);\n    return allDocs;\n  },\n\n  async addDocs(this: HeroCollection, docs: HeroDocType[]) {\n    const t0 = timeStart();\n    const res = await this.bulkInsert(docs);\n    timeEnd(t0, `addDocs - ${docs.length} items`);\n    return res;\n  },\n};\n\nconst collections = [\n  {\n    name: \"heroes\",\n    schema: heroSchema,\n    methods: heroDocMethods,\n    statics: heroCollectionMethods,\n  },\n  // {\n  //   name: 'heroes',\n  //   schema: heroSchema,\n  //   methods: {\n  //     hpPercent() {\n  //       return (this.hp / this.maxHP) * 100;\n  //     }\n  //   },\n  //   sync: true\n  // }\n];\n\n// const syncURL = `http://${window.location.hostname}:10102/`;\n// console.log(`host: ${syncURL}`);\n\nlet dbPromise: Promise<RxDatabase<MyDatabaseCollections>>;\nexport type IAdapter = \"idb\" | \"memory\" | \"websql\" | \"leveldb\";\nconst createDB = async (adapter: IAdapter) => {\n  console.log(\"DatabaseService: creating database..\");\n  const db: MyDatabase = await createRxDatabase<MyDatabaseCollections>({\n    name: \"testdb\", // <- name\n    adapter: adapter, // <- storage-adapter\n    password: \"passpasspass\", // <- password (optional)\n    multiInstance: false, // This should be set to false when you have single-instances like a single-window electron-app\n    eventReduce: true, // <- eventReduce (optional, default: true)\n  });\n\n  console.dir(db);\n  console.log(\"DatabaseService: created database\");\n  // window.db = db; // write to window for debugging\n\n  // create collections\n  // console.log(\"DatabaseService: create collections\");\n  await Promise.all(collections.map((colData) => db.collection(colData)));\n\n  // hooks\n  // console.log(\"DatabaseService: add hooks\");\n  // db.heroes.postInsert(\n  //   function myPostInsertHook(\n  //     this: HeroCollection, // own collection is bound to the scope\n  //     _docData: HeroDocType, // documents data\n  //     doc: HeroDocument // RxDocument\n  //   ) {\n  //     console.log(`insert to ${this.name}-collection: ${doc.name}`);\n  //   },\n  //   false // not async\n  // );\n\n  // TODO   : A function to input collectionId, and sync it with firestore db\n  // db.$.subscribe((changeEvent) => console.dir(changeEvent));\n\n  return db;\n};\n\nconst deleteDB = async () => {\n  if (!dbPromise) return false;\n  const db = await dbPromise;\n  await db.destroy();\n  await db.remove();\n  return true;\n};\n\nconst get = async (adpater: IAdapter) => {\n  if (!dbPromise) dbPromise = createDB(adpater);\n  const db = await dbPromise;\n  if (db.adapter !== adpater) {\n    console.warn(\n      `The current adapter is '${db.adapter}', re-creating with '${adpater}'`\n    );\n    await deleteDB();\n    dbPromise = createDB(adpater);\n  }\n  return dbPromise;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { get };\n","import React from \"react\";\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  PaginationTotalStandalone,\n  SizePerPageDropdownStandalone,\n} from \"react-bootstrap-table2-paginator\";\nimport BootstrapTable, {\n  TableChangeType,\n  TableChangeState,\n} from \"react-bootstrap-table-next\";\nimport { Row, Col } from \"react-bootstrap\";\n\ninterface IRemoteTable {\n  data: any[];\n  page: number;\n  sizePerPage: number;\n  onTableChange: (\n    type: TableChangeType,\n    newState: TableChangeState<any>\n  ) => void;\n  totalSize: number;\n}\n\nexport function RemoteTable({\n  data,\n  page,\n  sizePerPage,\n  onTableChange,\n  totalSize,\n}: IRemoteTable) {\n  const columns = [\n    {\n      dataField: \"name\",\n      text: \"Name\",\n    },\n    {\n      dataField: \"phone\",\n      text: \"Phone No\",\n    },\n    {\n      dataField: \"address\",\n      text: \"Address\",\n    },\n    {\n      dataField: \"area\",\n      text: \"Area\",\n    },\n  ];\n\n  return (\n    <div>\n      <PaginationProvider\n        pagination={paginationFactory({\n          custom: true,\n          page,\n          sizePerPage,\n          totalSize,\n        })}\n      >\n        {({ paginationProps, paginationTableProps }) => (\n          <div>\n            <div></div>\n            <Row>\n              <Col>\n                <BootstrapTable\n                  remote\n                  bootstrap4\n                  keyField=\"phone\"\n                  data={data}\n                  columns={columns}\n                  onTableChange={onTableChange}\n                  {...paginationTableProps}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <SizePerPageDropdownStandalone {...paginationProps} />\n              </Col>\n              <Col className=\"align-items-center\">\n                <PaginationTotalStandalone {...paginationProps} />\n              </Col>\n              <Col>\n                <div className=\"float-right\">\n                  <PaginationListStandalone {...paginationProps} />\n                </div>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </PaginationProvider>\n    </div>\n  );\n}\n\nexport default RemoteTable;\n","import React, { useEffect, useState } from \"react\";\nimport { get, MyDatabaseCollections, HeroDocType, IAdapter } from \"./rxdb/db\";\nimport { RxDatabase } from \"rxdb\";\nimport { addUserstoDB } from \"./rxdb/helper\";\nimport {\n  Container,\n  Jumbotron,\n  Button,\n  Row,\n  Col,\n  Form,\n  ProgressBar,\n  Card,\n  ButtonGroup,\n} from \"react-bootstrap\";\nimport {\n  TableChangeType,\n  TableChangeState,\n} from \"react-bootstrap-table-next\";\nimport RemoteTable from \"./RemoteTable\";\n\n// import {\n//   createRxDatabase,\n//   RxDatabase,\n//   RxDocument,\n//   /* ... */\n// } from \"rxdb\";\n// import { createDB, addUserstoDB, getUsers, getUserCount } from \"./helper\";\n\n// type IUser = {\n// string\n// }\n\nfunction App() {\n  const [users, setUsers] = useState<HeroDocType[]>();\n  const [db, setDB] = useState<RxDatabase<MyDatabaseCollections>>();\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [addCount, setAddCount] = useState<number>(100);\n  const [progress, setProgress] = useState<number>(0);\n  const [sizePerPage, setSizePerPage] = useState<number>(10);\n  const [page, setPage] = useState<number>(1);\n  const [adapter, setAdapter] = useState<IAdapter>(\"memory\");\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [availabeAdapters, setAvailabeAdapters] = useState<IAdapter[]>([\n    \"idb\",\n    \"memory\",\n    \"websql\",\n  ]);\n\n  useEffect(() => {});\n\n  useEffect(() => {\n    // create the databse\n    async function anyNameFunction() {\n      const theDB = await get(adapter);\n\n      setDB(theDB);\n      await addUserstoDB(theDB, 25, setProgress);\n\n      const users = await theDB.heroes.getDocs(sizePerPage, page);\n      setUsers(users);\n    }\n    anyNameFunction();\n  }, [adapter, db, page, sizePerPage]);\n\n  const getDocs = async () => {\n    const users = (await db?.heroes.getDocs(sizePerPage, page)) || [];\n    setUsers(users);\n  };\n\n  const reloadUI = async () => {\n    setProgress(0);\n    setPage(1);\n    setSizePerPage(10);\n    setUsers([]);\n    setTotalCount(0);\n\n    const theDB = await get(adapter);\n    setDB(theDB);\n\n    await getDocs();\n  };\n\n  useEffect(() => {\n    db?.heroes\n      .getDocs(sizePerPage, page)\n      .then((docs) => {\n        setUsers(docs);\n      })\n      .catch((err) => {\n        console.error(\"Failed to get users\", err);\n      });\n  }, [db, page, sizePerPage]);\n\n  useEffect(() => {\n    // Create an scoped async function in the hook\n    async function anyNameFunction() {\n      db &&\n        (await db.heroes.getCount().then((count) => {\n          setTotalCount(count);\n        }));\n\n      db &&\n        (await db.heroes.getCountPouch().then((count) => {\n          setTotalCount(count);\n        }));\n\n      db &&\n        (await db.heroes.getCountWithInfo().then((count) => {\n          setTotalCount(count);\n        }));\n    }\n    // Execute the created function directly\n    anyNameFunction();\n  }, [db, users]);\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setAddCount(+e.target.value);\n    setProgress(0);\n  };\n  const adapterLabel = {\n    idb: \"IndexedDB\",\n    memory: \"In Memmory\",\n    websql: \"Web SQL\",\n    leveldb: \"Level DB\",\n    localstorage: \"Local Storage\",\n  };\n\n  const handleAddSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setProgress(0);\n    db && (await addUserstoDB(db, addCount, setProgress));\n    setAddCount(100);\n    getDocs();\n  };\n\n  const progressInstance = (\n    <ProgressBar now={progress} label={`${progress}%`} />\n  );\n\n  const handleTableChange = (\n    type: TableChangeType,\n    { page, sizePerPage }: TableChangeState<any>\n  ) => {\n    // if (type === \"pagination\")\n    setPage(page);\n    setSizePerPage(sizePerPage);\n  };\n\n  // fetchCount();\n  return (\n    <Container className=\"p-3\">\n      <Jumbotron style={{ textAlign: \"center\" }}>\n        <h1 className=\"header\">RxDB ({adapterLabel[adapter]}) with React</h1>\n      </Jumbotron>\n      <Row>\n        <Col>\n          <Form onSubmit={handleAddSubmit}>\n            <Form.Row className=\"align-items-center\">\n              <Col xs=\"auto\">\n                <Form.Control\n                  className=\"mb-1\"\n                  id=\"inlineFormInput\"\n                  placeholder=\"Enter No\"\n                  value={addCount}\n                  onChange={handleChangeInput}\n                />\n              </Col>\n\n              <Col xs=\"auto\">\n                <Button variant=\"success\" type=\"submit\" className=\"mb-2\">\n                  Add {addCount} Users\n                </Button>\n                <br />\n                {progressInstance}\n              </Col>\n              <Col> </Col>\n            </Form.Row>\n          </Form>\n        </Col>\n        <Col>\n          <ButtonGroup aria-label=\"Adapters\">\n            {availabeAdapters.map((anAdapter) => (\n              <Button\n                key={anAdapter}\n                onClick={() => {\n                  setAdapter(anAdapter);\n                }}\n                variant={anAdapter === adapter ? \"info\" : \"outline-info\"}\n              >\n                {adapterLabel[anAdapter]}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Col>\n\n        <Col xs=\"auto\">\n          <p>\n            ({users?.length}/{totalCount}) Fetched\n          </p>\n          <Button\n            variant=\"primary\"\n            className=\"mb-2\"\n            onClick={() => {\n              reloadUI();\n            }}\n          >\n            Reload\n          </Button>{\" \"}\n          <Button\n            variant=\"outline-danger\"\n            className=\"mb-2\"\n            onClick={() => {\n              reloadUI();\n            }}\n          >\n            Delete DB\n          </Button>{\" \"}\n        </Col>\n        <Col xs=\"auto\"></Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Card style={{ marginTop: \"16px\" }}>\n            <Card.Body>\n              {\" \"}\n              First Doc : {JSON.stringify(users && users[0])}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ marginTop: \"16px\" }}>\n          <RemoteTable\n            data={users || []}\n            page={page}\n            sizePerPage={sizePerPage}\n            totalSize={totalCount}\n            onTableChange={handleTableChange}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n\n/* <div className=\"App\">\n<header className=\"App-header\">\n  \n</header>\n</div> */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}