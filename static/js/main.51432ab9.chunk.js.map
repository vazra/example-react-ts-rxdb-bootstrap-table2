{"version":3,"sources":["db/db.ts","utils/helper.tsx","components/RemoteTable.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["dbPromise","addUserstoDB","db","total","setProgress","saveTimeTaken","chunk","a","t0","performance","now","timeTaken","Math","max","ceil","console","log","chunkArray","Array","floor","fill","push","done","aChunk","userArry","i","name","faker","findName","phone","phoneNumber","address","streetAddress","area","countryCode","ta0","users","bulkInsert","ta1","toFixed","t1","adapter","length","reduce","b","min","timeStart","timeEnd","funName","supportedAdapters","addRxPlugin","RxDBAdapterCheckPlugin","RxDBEncryptionPlugin","RxDBQueryBuilderPlugin","RxDBValidatePlugin","require","checkAdapter","then","val","indexOf","collections","schema","title","description","version","keyCompression","type","properties","primary","required","statics","getCount","find","exec","allDocs","getCountPouch","pouch","catch","err","entries","rows","getCountWithInfo","info","doc_count","getDocs","count","page","skip","limit","getDocsPouch","include_docs","addDocs","docs","res","createDB","createRxDatabase","password","multiInstance","eventReduce","dir","Promise","all","map","colData","collection","deleteDB","destroy","remove","changeAdapter","warn","getDB","adpater","RemoteTable","data","sizePerPage","onTableChange","totalSize","columns","dataField","text","pagination","paginationFactory","custom","paginationProps","paginationTableProps","Row","Col","remote","bootstrap4","keyField","className","Dashboard","useState","setUsers","setDB","totalCount","setTotalCount","addCount","setAddCount","progress","setSizePerPage","setPage","setAdapter","isLoading","setLoading","target","useRef","latestReadTime","setLatestReadTime","latestWriteTime","setLatestWriteTime","availabeAdapters","useEffect","theDB","anyNameFunction","reloadUI","error","adapterLabel","idb","memory","websql","leveldb","localstorage","handleAddSubmit","e","preventDefault","progressInstance","ProgressBar","label","Container","ref","Jumbotron","style","textAlign","Form","onSubmit","xs","Control","id","placeholder","value","onChange","Button","variant","Spinner","animation","role","ButtonGroup","aria-label","anAdapter","key","onClick","Card","marginTop","Body","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.51432ab9.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport {\n  createRxDatabase,\n  addRxPlugin,\n  RxDatabase,\n  RxJsonSchema,\n  checkAdapter,\n} from \"rxdb\";\nimport { timeStart, timeEnd } from \"../utils/helper\";\nimport {\n  UserCollection,\n  UserDocType,\n  UserCollectionMethods,\n  MyDatabaseCollections,\n  MyDatabase,\n  IAdapter,\n} from \"../types\";\n\nimport { RxDBAdapterCheckPlugin } from \"rxdb/plugins/adapter-check\";\nimport { RxDBEncryptionPlugin } from \"rxdb/plugins/encryption\";\nimport { RxDBQueryBuilderPlugin } from \"rxdb/plugins/query-builder\";\nimport { RxDBValidatePlugin } from \"rxdb/plugins/validate\";\n\nlet dbPromise: Promise<RxDatabase<MyDatabaseCollections>>;\nconst supportedAdapters: IAdapter[] = [];\n\naddRxPlugin(RxDBAdapterCheckPlugin);\naddRxPlugin(RxDBEncryptionPlugin);\naddRxPlugin(RxDBQueryBuilderPlugin);\naddRxPlugin(RxDBValidatePlugin);\n\naddRxPlugin(require(\"pouchdb-adapter-memory\"));\naddRxPlugin(require(\"pouchdb-adapter-idb\"));\naddRxPlugin(require(\"pouchdb-adapter-websql\"));\n// addRxPlugin(require(\"pouchdb-adapter-leveldb\"));\n\nconst _checkAdapter = () => {\n  checkAdapter(\"localstorage\").then((val) => {\n    console.log(\"RXJS -> Adapter -> localstorage status :\", val);\n    if (val && supportedAdapters.indexOf(\"localstorage\") === -1)\n      supportedAdapters.push(\"localstorage\");\n  });\n  checkAdapter(\"idb\").then((val) => {\n    console.log(\"RXJS -> Adapter -> idb status :\", val);\n    if (val && supportedAdapters.indexOf(\"idb\") === -1)\n      supportedAdapters.push(\"idb\");\n  });\n  checkAdapter(\"memory\").then((val) => {\n    console.log(\"RXJS -> Adapter -> memory status :\", val);\n    if (val && supportedAdapters.indexOf(\"memory\") === -1)\n      supportedAdapters.push(\"memory\");\n  });\n  checkAdapter(\"leveldb\").then((val) => {\n    console.log(\"RXJS -> Adapter -> leveldb status :\", val);\n    if (val && supportedAdapters.indexOf(\"leveldb\") === -1)\n      supportedAdapters.push(\"leveldb\");\n  });\n};\n_checkAdapter();\n\nconst userSchema: RxJsonSchema<UserDocType> = {\n  title: \"vendor schema\",\n  description: \"describes a vendor\",\n  version: 0,\n  keyCompression: false,\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\",\n    },\n    phone: {\n      type: \"string\",\n      primary: true,\n    },\n    address: {\n      type: \"string\",\n    },\n    area: {\n      type: \"string\",\n    },\n  },\n  required: [\"name\", \"phone\", \"address\"],\n};\n\nconst userCollectionMethods: UserCollectionMethods = {\n  async getCount(this: UserCollection) {\n    const t0 = timeStart();\n    const allDocs = await this.find().exec();\n    console.log(\"Total users Count: \", allDocs.length);\n    timeEnd(t0, `getCount - ${allDocs.length}`);\n    return allDocs.length;\n  },\n  async getCountPouch(this: UserCollection) {\n    const t0 = timeStart();\n\n    const entries = await this.pouch.allDocs().catch((err) => {\n      console.log(\"failed alldocs\", err);\n    });\n    console.log(\"Total users Count: \", entries.rows.length);\n    timeEnd(t0, `getCountPouch - ${entries.rows.length}`);\n\n    return entries.rows.length;\n  },\n\n  async getCountWithInfo(this: UserCollection) {\n    const t0 = timeStart();\n    const info = await this.pouch.info();\n    console.log(\"Total users Count: \", info.doc_count);\n    timeEnd(t0, `getCountWithInfo - ${info.doc_count}`);\n    return info.doc_count;\n  },\n\n  async getDocs(\n    this: UserCollection,\n    count: number,\n    page: number = 1,\n    saveTimeTaken?: React.Dispatch<React.SetStateAction<[number, number]>>\n  ) {\n    const t0 = timeStart();\n\n    const allDocs = await this.find()\n      .skip(count * (page - 1))\n      .limit(count)\n      .exec();\n    console.log(\n      `retrived ${allDocs.length} docs from users (skipped : ${page * count})`\n    );\n    const timeTaken = timeEnd(t0, `getDocs - ${allDocs.length} items`);\n    saveTimeTaken && saveTimeTaken([timeTaken, allDocs.length]);\n    return allDocs;\n  },\n\n  async getDocsPouch(this: UserCollection, count: number, page: number = 0) {\n    const t0 = timeStart();\n    const allDocs = await this.pouch.allDocs({ include_docs: true });\n    timeEnd(t0, `getDocsPouch - ${allDocs.length} items`);\n    return allDocs;\n  },\n\n  async addDocs(\n    this: UserCollection,\n    docs: UserDocType[],\n    saveTimeTaken?: React.Dispatch<React.SetStateAction<[number, number]>>\n  ) {\n    const t0 = timeStart();\n    const res = await this.bulkInsert(docs);\n    const timeTaken = timeEnd(t0, `addDocs - ${docs.length} items`);\n    saveTimeTaken && saveTimeTaken([timeTaken, docs.length]);\n\n    return res;\n  },\n};\n\nconst collections = [\n  {\n    name: \"users\",\n    schema: userSchema,\n    // methods: userDocMethods,\n    statics: userCollectionMethods,\n  },\n];\n\nconst createDB = async (adapter: IAdapter) => {\n  console.log(\"DatabaseService: creating database..\");\n  const db: MyDatabase = await createRxDatabase<MyDatabaseCollections>({\n    name: \"testdb\", // <- name\n    adapter: adapter, // <- storage-adapter\n    password: \"passpasspass\", // <- password (optional)\n    multiInstance: false, // This should be set to false when you have single-instances like a single-window electron-app\n    eventReduce: true, // <- eventReduce (optional, default: true)\n  });\n\n  console.dir(db);\n  console.log(\"DatabaseService: created database\");\n  // window.db = db; // write to window for debugging\n\n  // create collections\n  // console.log(\"DatabaseService: create collections\");\n  await Promise.all(collections.map((colData) => db.collection(colData)));\n\n  // hooks\n  // console.log(\"DatabaseService: add hooks\");\n  // db.heroes.postInsert(\n  //   function myPostInsertHook(\n  //     this: HeroCollection, // own collection is bound to the scope\n  //     _docData: HeroDocType, // documents data\n  //     doc: HeroDocument // RxDocument\n  //   ) {\n  //     console.log(`insert to ${this.name}-collection: ${doc.name}`);\n  //   },\n  //   false // not async\n  // );\n\n  // TODO   : A function to input collectionId, and sync it with firestore db\n  // db.$.subscribe((changeEvent) => console.dir(changeEvent));\n\n  return db;\n};\n\nconst deleteDB = async () => {\n  if (!dbPromise) return false;\n  const db = await dbPromise;\n  await db.destroy();\n  await db.remove();\n  return true;\n};\n\nexport const changeAdapter = async (adapter: IAdapter) => {\n  console.warn(`re-creating database with adapter '${adapter}'`);\n  await deleteDB();\n  dbPromise = createDB(adapter);\n  return dbPromise;\n};\n\nconst getDB = async (adpater: IAdapter) => {\n  if (!dbPromise) dbPromise = createDB(adpater);\n  return dbPromise;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { getDB, supportedAdapters };\n","import { RxDatabase } from \"rxdb\";\nimport React from \"react\";\nimport faker from \"faker\";\nimport { UserDocType, MyDatabaseCollections } from \"../types\";\n\nexport const createAUser = (): UserDocType => {\n  var name = faker.name.findName();\n  var phone = faker.phone.phoneNumber();\n  var address = faker.address.streetAddress();\n  var area = faker.address.countryCode();\n  return { name, phone, address, area };\n};\n\n// ass n - number of dummy users to the db\nexport const addUserstoDB = async (\n  db: RxDatabase<MyDatabaseCollections> | undefined,\n  total: number,\n  setProgress: React.Dispatch<React.SetStateAction<number>>,\n  saveTimeTaken?: React.Dispatch<React.SetStateAction<[number, number]>>,\n  chunk?: number\n) => {\n  const t0 = performance.now();\n  const timeTaken = [];\n\n  // if the chunk is the default one set it to an appropriate value (max of 100 or .5% increment is considered)\n  if (!chunk) {\n    chunk = Math.max(100, Math.ceil(total / 200));\n  }\n  console.log(\"inserting data in chunks of \", chunk);\n\n  const chunkArray = Array(Math.floor(total / chunk)).fill(chunk);\n  if (total % chunk > 0) chunkArray.push(total % chunk);\n  console.log(\"chunk arry\", chunkArray);\n  let done = 0;\n\n  for (const aChunk of chunkArray) {\n    const userArry = [];\n    for (let i = 0; i < aChunk; i++) {\n      userArry.push(createAUser());\n    }\n    const ta0 = performance.now();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const result = await db?.users.bulkInsert(userArry);\n    const ta1 = performance.now();\n    timeTaken.push(ta1 - ta0);\n    done = done + aChunk;\n    setProgress(+((done / total) * 100).toFixed(1));\n    // console.log(\n    //   `inserted ${result?.success.length} docs & failed ${result?.error.length} docs`\n    // );\n  }\n  const t1 = performance.now();\n  console.log(\n    `${db?.adapter}: Time Taken to add ${total} users : ${(t1 - t0).toFixed(\n      1\n    )}ms`\n  );\n  console.log(\n    `Pass: ${timeTaken.length}, time: ${timeTaken\n      .reduce((a, b) => a + b, 0)\n      .toFixed(1)},min: ${Math.min(...timeTaken).toFixed(1)},max: ${Math.max(\n      ...timeTaken\n    ).toFixed(1)},avg: ${(\n      timeTaken.reduce((a, b) => a + b, 0) / timeTaken.length\n    ).toFixed(1)},  `\n  );\n  saveTimeTaken &&\n    saveTimeTaken([+timeTaken.reduce((a, b) => a + b, 0).toFixed(2), done]);\n  // console.log(db);\n};\n\n// helper function thart starts performace - time measurement\nexport const timeStart = () => {\n  return performance.now();\n};\n\n// helper function  to end and print  - time measurement\nexport const timeEnd = (timeStart: number, funName: string) => {\n  var t1 = performance.now();\n  console.log(`fun: ${funName} took ${(t1 - timeStart).toFixed(2)}ms`);\n  return +(t1 - timeStart).toFixed(2);\n};\nexport const kkk = \"\";\n","import React from \"react\";\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  PaginationTotalStandalone,\n  SizePerPageDropdownStandalone,\n} from \"react-bootstrap-table2-paginator\";\nimport BootstrapTable, {\n  TableChangeType,\n  TableChangeState,\n} from \"react-bootstrap-table-next\";\nimport { Row, Col } from \"react-bootstrap\";\n\ninterface IRemoteTable {\n  data: any[];\n  page: number;\n  sizePerPage: number;\n  onTableChange: (\n    type: TableChangeType,\n    newState: TableChangeState<any>\n  ) => void;\n  totalSize: number;\n}\n\nexport function RemoteTable({\n  data,\n  page,\n  sizePerPage,\n  onTableChange,\n  totalSize,\n}: IRemoteTable) {\n  const columns = [\n    {\n      dataField: \"name\",\n      text: \"Name\",\n    },\n    {\n      dataField: \"phone\",\n      text: \"Phone No\",\n    },\n    {\n      dataField: \"address\",\n      text: \"Address\",\n    },\n    {\n      dataField: \"area\",\n      text: \"Area\",\n    },\n  ];\n\n  return (\n    <div>\n      <PaginationProvider\n        pagination={paginationFactory({\n          custom: true,\n          page,\n          sizePerPage,\n          totalSize,\n        })}\n      >\n        {({ paginationProps, paginationTableProps }) => (\n          <div>\n            <div></div>\n            <Row>\n              <Col>\n                <BootstrapTable\n                  remote\n                  bootstrap4\n                  {...paginationTableProps}\n                  keyField=\"phone\"\n                  data={data}\n                  columns={columns}\n                  onTableChange={onTableChange}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <SizePerPageDropdownStandalone {...paginationProps} />\n              </Col>\n              <Col className=\"align-items-center\">\n                <PaginationTotalStandalone {...paginationProps} />\n              </Col>\n              <Col>\n                <div className=\"float-right\">\n                  <PaginationListStandalone {...paginationProps} />\n                </div>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </PaginationProvider>\n    </div>\n  );\n}\n\nexport default RemoteTable;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { getDB, changeAdapter } from \"../db/db\";\nimport { RxDatabase } from \"rxdb\";\nimport { addUserstoDB } from \"../utils/helper\";\nimport {\n  Container,\n  Jumbotron,\n  Button,\n  Row,\n  Col,\n  Form,\n  ProgressBar,\n  Card,\n  ButtonGroup,\n  Spinner,\n} from \"react-bootstrap\";\nimport { TableChangeType, TableChangeState } from \"react-bootstrap-table-next\";\nimport RemoteTable from \"./RemoteTable\";\nimport { UserDocType, MyDatabaseCollections, IAdapter } from \"../types\";\n\n// interface IDashboard {\n//   children: React.ReactNode;\n// }\n\nexport function Dashboard() {\n  const [users, setUsers] = useState<UserDocType[]>();\n  const [db, setDB] = useState<RxDatabase<MyDatabaseCollections>>();\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [addCount, setAddCount] = useState<number>(100);\n  const [progress, setProgress] = useState<number>(0);\n  const [sizePerPage, setSizePerPage] = useState<number>(10);\n  const [page, setPage] = useState<number>(1);\n  const [adapter, setAdapter] = useState<IAdapter>(\"memory\");\n  const [isLoading, setLoading] = useState<[boolean, string]>([false, \"\"]);\n  const target = useRef<HTMLDivElement>(null);\n\n  const [latestReadTime, setLatestReadTime] = useState<[number, number]>([\n    334.54,\n    20,\n  ]);\n  const [latestWriteTime, setLatestWriteTime] = useState<[number, number]>([\n    334.54,\n    20,\n  ]);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [availabeAdapters, setAvailabeAdapters] = useState<IAdapter[]>([\n    \"idb\",\n    \"memory\",\n    \"websql\",\n  ]);\n\n  useEffect(() => {\n    // create the databse\n    async function anyNameFunction() {\n      setLoading([true, \"initializing database\"]);\n      const theDB = await getDB(adapter);\n\n      setDB(theDB);\n      await addUserstoDB(theDB, 100, setProgress, setLatestWriteTime);\n\n      const users = await theDB?.users?.getDocs(10, 1, setLatestReadTime);\n      setUsers(users);\n      setLoading([false, \"\"]);\n    }\n    anyNameFunction();\n  }, [adapter]);\n\n  const getDocs = async () => {\n    const users =\n      (await db?.users?.getDocs(sizePerPage, page, setLatestReadTime)) || [];\n    setUsers(users);\n  };\n\n  const reloadUI = async () => {\n    setProgress(0);\n    setPage(1);\n    setSizePerPage(10);\n    setUsers([]);\n    setTotalCount(0);\n\n    const theDB = await getDB(adapter);\n    setDB(theDB);\n\n    await getDocs();\n  };\n\n  useEffect(() => {\n    db?.users\n      .getDocs(sizePerPage, page, setLatestReadTime)\n      .then((docs) => {\n        setUsers(docs);\n      })\n      .catch((err) => {\n        console.error(\"Failed to get users\", err);\n      });\n  }, [db, page, sizePerPage]);\n\n  useEffect(() => {\n    // Create an scoped async function in the hook\n    async function anyNameFunction() {\n      const theDB = await getDB(adapter);\n      await theDB?.users?.getCount().then((count) => {\n        setTotalCount(count);\n      });\n\n      await theDB?.users?.getCountPouch().then((count) => {\n        setTotalCount(count);\n      });\n\n      await theDB?.users?.getCountWithInfo().then((count) => {\n        setTotalCount(count);\n      });\n    }\n    // Execute the created function directly\n    anyNameFunction();\n  }, [adapter, users]);\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setAddCount(+e.target.value);\n    setProgress(0);\n  };\n  const adapterLabel = {\n    idb: \"IndexedDB\",\n    memory: \"In Memmory\",\n    websql: \"Web SQL\",\n    leveldb: \"Level DB\",\n    localstorage: \"Local Storage\",\n  };\n\n  const handleAddSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setProgress(0);\n    db && (await addUserstoDB(db, addCount, setProgress, setLatestWriteTime));\n    setAddCount(100);\n    getDocs();\n  };\n\n  const progressInstance = (\n    <ProgressBar now={progress} label={`${progress}%`} />\n  );\n\n  const handleTableChange = (\n    type: TableChangeType,\n    { page, sizePerPage }: TableChangeState<any>\n  ) => {\n    // if (type === \"pagination\")\n    setPage(page);\n    setSizePerPage(sizePerPage);\n  };\n\n  // fetchCount();\n\n  return (\n    <Container className=\"p-3\">\n      <div ref={target}>\n        <Jumbotron style={{ textAlign: \"center\" }}>\n          <h1 className=\"header\">RxDB ({adapterLabel[adapter]}) with React</h1>\n        </Jumbotron>\n      </div>\n      <Row>\n        <Col>\n          <Form onSubmit={handleAddSubmit}>\n            <Form.Row className=\"align-items-center\">\n              <Col xs=\"auto\">\n                <Form.Control\n                  className=\"mb-1\"\n                  id=\"inlineFormInput\"\n                  placeholder=\"Enter No\"\n                  value={addCount}\n                  onChange={handleChangeInput}\n                />\n              </Col>\n\n              <Col xs=\"auto\">\n                <Button variant=\"success\" type=\"submit\" className=\"mb-2\">\n                  Add {addCount} Users\n                </Button>\n                <br />\n                {progressInstance}\n              </Col>\n              <Col> </Col>\n            </Form.Row>\n          </Form>\n        </Col>\n        <Col>\n          {isLoading[0] ? (\n            <Row>\n              <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...{isLoading[1]}</span>\n              </Spinner>\n            </Row>\n          ) : (\n            <ButtonGroup aria-label=\"Adapters\">\n              {availabeAdapters.map((anAdapter) => (\n                <Button\n                  key={anAdapter}\n                  onClick={async () => {\n                    setLoading([true, `updating adapter ${anAdapter}`]);\n                    await changeAdapter(anAdapter);\n                    setAdapter(anAdapter);\n                  }}\n                  variant={anAdapter === adapter ? \"info\" : \"outline-info\"}\n                >\n                  {adapterLabel[anAdapter]}\n                </Button>\n              ))}\n            </ButtonGroup>\n          )}\n        </Col>\n\n        <Col xs=\"auto\">\n          <Button\n            variant=\"primary\"\n            className=\"mb-2\"\n            onClick={() => {\n              reloadUI();\n            }}\n          >\n            Reload\n          </Button>{\" \"}\n          <Button\n            variant=\"outline-danger\"\n            className=\"mb-2\"\n            onClick={() => {\n              reloadUI();\n            }}\n          >\n            Delete DB\n          </Button>{\" \"}\n          <p>\n            ({users?.length}/{totalCount}) Fetched\n          </p>\n        </Col>\n        <Col xs=\"auto\"></Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card style={{ marginTop: \"16px\" }}>\n            <Card.Body>\n              Latest Read Time : {latestReadTime[0]}ms for {latestReadTime[1]}{\" \"}\n              docs\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card style={{ marginTop: \"16px\" }}>\n            <Card.Body>\n              Latest Write Time : {latestWriteTime[0]}ms for{\" \"}\n              {latestWriteTime[1]} docs\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ marginTop: \"16px\" }}>\n          <RemoteTable\n            data={users || []}\n            page={page}\n            sizePerPage={sizePerPage}\n            totalSize={totalCount}\n            onTableChange={handleTableChange}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card style={{ marginTop: \"16px\" }}>\n            <Card.Body>\n              {\" \"}\n              First Doc : {JSON.stringify(users && users[0])}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}